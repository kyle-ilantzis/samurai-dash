
#version 330 core
// Light and Material Uniform Variables
uniform float materialAmbient; // Ambient Term
uniform float materialDiffuse; // Diffuse Term
uniform float materialSpecular; // Specular Term
uniform float materialExponent; // Specular Exponent

//fog color
 
uniform vec4 vFogColor; // Fog color
uniform float fStart; // This is only for linear fog
uniform float fEnd; // This is only for linear fog
uniform float fDensity; // For exp and exp2 equation
    
   int iEquation; // 0 = linear, 1 = exp, 2 = exp2

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: Constant  y: Linear  z: Quadratic



in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light
in vec4 eyeSpacePos;

// Ouput to fragment shader
out vec4 color;
/*
float getFogFactor(FogParameters params, float fFogCoord) 
{ 
   float fResult = 0.0; 
   if(params.iEquation == 0) 
      fResult = (params.fEnd-fFogCoord)/(params.fEnd-params.fStart); 
   else if(params.iEquation == 1) 
      fResult = exp(-params.fDensity*fFogCoord); 
   else if(params.iEquation == 2) 
      fResult = exp(-pow(params.fDensity*fFogCoord, 2.0)); 
       
   fResult = 1.0-clamp(fResult, 0.0, 1.0); 
    
   return fResult; 
}*/

void main()
{
	// set the fragment color to the interpolated vertex color
	vec3 n = normalize(normal);
	vec3 l = normalize(lightVector.xyz);
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	vec3 E = normalize(eyeVector);
	vec3 R = normalize(reflect(-l,n));
	float cosAlpha = clamp(dot(E,R), 0,1);	

	float distance = length(lightVector.xyz);
	float Attenuation = 1.0/(lightAttenuation.x + (lightAttenuation.y * distance) + (lightAttenuation.z * (distance*distance)));

	vec3 MaterialAmbientColor =  v_color.xyz  * materialAmbient;
	vec3 MaterialDiffuseColor = materialDiffuse* lightColor * v_color.xyz * cosTheta;
	vec3 MaterialSpecularColor = v_color.xyz*  materialSpecular *lightColor * pow(cosAlpha,materialExponent);
	
	float fFogCoord = abs(eyeSpacePos.z/eyeSpacePos.w);
	
	color =  vec4(MaterialAmbientColor + MaterialDiffuseColor + MaterialSpecularColor, 1.0f);
	//color = mix(color,fogParams.vFogColor, getFogFactor(fogParams, fFogCoord));
	//color = v_color;
}

