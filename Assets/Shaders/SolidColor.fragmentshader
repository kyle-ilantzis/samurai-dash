
#version 330 core
// Light and Material Uniform Variables
uniform float materialAmbient; // Ambient Term
uniform float materialDiffuse; // Diffuse Term
uniform float materialSpecular; // Specular Term
uniform float materialExponent; // Specular Exponent

uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: Constant  y: Linear  z: Quadratic



in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light

// Ouput to fragment shader
out vec4 color;

void main()
{
	// set the fragment color to the interpolated vertex color
	vec3 n = normalize(normal);
	vec3 l = normalize(lightVector.xyz);
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	vec3 E = normalize(eyeVector);
	vec3 R = normalize(reflect(-l,n));
	float cosAlpha = clamp(dot(E,R), 0,1);	

	float distance = length(lightVector.xyz);
	float Attenuation = 1.0/(lightAttenuation.x + (lightAttenuation.y * distance) + (lightAttenuation.z * (distance*distance)));

	vec3 MaterialAmbientColor =  v_color.xyz  * materialAmbient;
	vec3 MaterialDiffuseColor = materialDiffuse* lightColor * v_color.xyz * cosTheta;
	vec3 MaterialSpecularColor = v_color.xyz*  materialSpecular *lightColor * pow(cosAlpha,materialExponent);
	color =  vec4(MaterialAmbientColor + MaterialDiffuseColor + MaterialSpecularColor, 1.0f);
	//color = v_color;
}