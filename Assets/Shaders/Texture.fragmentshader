
#version 330 core

// Light and Material Uniform Variables
uniform float materialAmbient; // Ambient Term
uniform float materialDiffuse; // Diffuse Term
uniform float materialSpecular; // Specular Term
uniform float materialExponent; // Specular Exponent


uniform vec3 lightColor;
uniform vec3 lightAttenuation; // x: Constant  y: Linear  z: Quadratic


// Interpolated values from the vertex shaders
in vec2 UV;
in vec4 v_color;
in vec3 normal; // You will need this when you do per-fragment lighting
in vec3 eyeVector;       // Vector from the vertex to the Camera in View Space
in vec4 lightVector;     // Vector from the vertex to the Light in View Space
						 // Length of lightVector is the distance between light and vertex
						 // if w = 1: Point light, if w = 0: directional light


// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

void main()
{
	vec3 n = normalize(normal);
	vec3 l = normalize(lightVector.xyz);
	float cosTheta = clamp( dot( n,l ), 0,1 );

	float distance = length(lightVector.xyz);
	float Attenuation = 1.0/(lightAttenuation.x + (lightAttenuation.y * distance) + (lightAttenuation.z * (distance*distance)));
	vec4 textureColor = texture( myTextureSampler, UV );
	vec3 MaterialAmbientColor =  v_color.xyz  * materialAmbient * textureColor.xyz;
	vec3 MaterialDiffuseColor = materialDiffuse* lightColor * v_color.xyz * cosTheta * textureColor.xyz;
	
    // modulate texture color with vertex color
    //color = v_color * textureColor;
	color =  vec4(MaterialAmbientColor + MaterialDiffuseColor , 1.0f) * textureColor;
	
    // Alpha test - Discard Fragment below treshold
    if(color.a <= 0.02f)
        discard;
}
